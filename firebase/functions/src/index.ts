import * as functions from "firebase-functions";
import * as admin from "firebase-admin";

admin.initializeApp();

// export const sendPushNotification = messaging.sendPushNotification

// Start writing Firebase Functions
// https://firebase.google.com/docs/functions/typescript

// device„Åî„Å®„Å´ÈÄöÁü•„ÇíÂèó„ÅëÂèñ„Çã„ÅãÂê¶„Åã„ÇíË®≠ÂÆö„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åó„Çà„ÅÜ„ÄÇ
// ‚Üë„Éà„Éº„ÇØ„É≥„ÅÆÊÉÖÂ†±„Åå„ÅÑ„Çã„Å£„ÅΩ„ÅÑ: users/{userId}/topics/{topicId}„ÅÆÂûã„Çí
// Map{key: token, value: topic}„Å®„Åã„Å´„Åô„Çã„Å®ËâØ„ÅçÔºüÔºü
export const subscribeTokenToTopicWhenTokenIsCreated =
  functions.region("asia-northeast1")
      .firestore
      .document("users/{userId}/tokens/{tokenId}")
      .onCreate(async (snapshot, context) => {
        if (snapshot) {
          const token = snapshot.data().id;
          const topic = "newPost";
          await admin.messaging().subscribeToTopic(token, topic);
          const userDoc = await admin.firestore()
              .collection("users")
              .doc(context.params.userId)
              .get();
          const existingTopics = userDoc.data()?.topics;
          return admin.firestore()
              .collection("users")
              .doc(context.params.userId)
              .update({
                topics: existingTopics != null ?
                  existingTopics.includes(topic) ?
                    existingTopics :
                    existingTopics.concat([topic]) :
                  [topic],
              });
        } else {
          return null;
        }
      });

// Êñ∞Ë¶è„ÅÆÊäïÁ®ø„Åå‰Ωú„Çâ„Çå„Åü„Çø„Ç§„Éü„É≥„Ç∞„Åß„ÄÅnewPost„Éà„Éî„ÉÉ„ÇØ„Å´„Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥„Åó„Å¶„Çã
// token„Åü„Å°„Å´ÈÄöÁü•„ÇíÈÄÅ„Å£„Å¶„Çã
export const sendPushNotificationToTopicWhenPostIsCreated =
  functions.region("asia-northeast1")
      .firestore
      .document("users/{userId}/posts/{postId}")
      .onCreate(async (snapshot, context) => {
        if (snapshot) {
          const topic = "newPost";
          // const title = "New Post!";
          const title = "Êñ∞ÁùÄ„ÅÆÊäïÁ®ø„Åå„ÅÇ„Çä„Åæ„Åô";
          // const body = "Êñ∞ÁùÄ„ÅÆÊäïÁ®ø„Åå„ÅÇ„Çä„Åæ„Åôüòç";
          const body = snapshot.data().title;
          const page = "HomePostsPage";
          return admin.messaging().sendToTopic(topic, {
            notification: {
              title: title,
              body: body,
            },
            data: {
              page: page,
            },
          });
        } else {
          return null;
        }
      });

// device„Åî„Å®„Å´ÈÄöÁü•„ÇíÂèó„ÅëÂèñ„Çã„ÅãÂê¶„Åã„ÇíË®≠ÂÆö„Åß„Åç„Çã„Çà„ÅÜ„Å´„Åó„Çà„ÅÜ„ÄÇ
// ‚Üë„Éà„Éº„ÇØ„É≥„ÅÆÊÉÖÂ†±„Åå„ÅÑ„Çã„Å£„ÅΩ„ÅÑ: users/{userId}/pushNoticesSetting/{notificationId}„ÅÆÂûã„Çí
// Map{key: token, value: topic}„Å®„Åã„Å´„Åô„Çã„Å®ËâØ„ÅçÔºüÔºü
export const sendPushNotificationWhenReplyIsCreated =
  functions.region("asia-northeast1")
      .firestore
      .document("users/{userId}/posts/{postId}/replies/{replyId}")
      .onCreate(async (snapshot, context) => {
        // const authUid = context.auth?.uid;
        const userId = context.params.userId;
        const replierId = snapshot.data().replierId;
        // reply„Åó„Åü„É¶„Éº„Ç∂„ÉºÔºàauthUidÔºâ„Åå
        // post„ÅÆuserIdÔºàuserIdÔºâ„Å®Áï∞„Å™„Çã„Å®„Åç
        if (replierId != userId) {
          if (snapshot) {
            const userDoc = await admin.firestore()
                .collection("users")
                .doc(userId)
                .get();
            const notification = "replyToMyPost";
            const isPushNoticeAllowed =
              userDoc.data()?.pushNoticesSetting.includes(notification);
            const nickname = snapshot.data().nickname;
            // const title = "New Reply To Your Post!";
            const title = `${nickname}„Åï„Çì„Åã„Çâ„ÅÆËøî‰ø°„Åå„ÅÇ„Çä„Åæ„Åô`;
            // const body = "„ÅÇ„Å™„Åü„ÅÆÊäïÁ®ø„Å´Ëøî‰ø°„Åå„ÅÇ„Çä„Åæ„Åôüòò";
            const body = snapshot.data().body;
            const postId = context.params.postId;
            const postDoc = await admin.firestore()
                .collection("users")
                .doc(userId)
                .collection("posts")
                .doc(postId)
                .get();
            const emotion = postDoc.data()?.emotion;
            const serverTimestamp =
              admin.firestore.FieldValue.serverTimestamp();
            const noticeDocRef = admin.firestore()
                .collection("users")
                .doc(userId)
                .collection("notices")
                .doc();
            // „Éó„ÉÉ„Ç∑„É•ÈÄöÁü•„ÅåË®±ÂèØ„Åï„Çå„Å¶„ÅÑ„Çã„Å®„Åç
            if (isPushNoticeAllowed) {
              const tokensSnapshot = await admin.firestore()
                  .collection("users")
                  .doc(userId)
                  .collection("tokens")
                  .get();
              const tokens = tokensSnapshot.docs.map((doc) => doc.id);
              const page = "MyPostsPage";
              // „Éó„ÉÉ„Ç∑„É•ÈÄöÁü•„ÇíÈÄÅ„Çã
              await admin.messaging()
                  .sendAll(tokens.map((token: string) => ({
                    token: token,
                    notification: {
                      title: title,
                      body: body,
                    },
                    data: {
                      page: page,
                    },
                  })));
              // ÈÄöÁü•‰∏ÄË¶ßÔºànoticesÔºâ„Å´ËøΩÂä†„Åô„Çã
              return noticeDocRef.set({
                id: noticeDocRef.id,
                userId: userId,
                postId: postId,
                posterId: userId,
                title: title,
                body: body,
                nickname: nickname,
                emotion: emotion != null ? emotion : "",
                isRead: false,
                createdAt: serverTimestamp,
              });
            } else {
              // ÈÄöÁü•ÔºànoticesÔºâ„Å´ËøΩÂä†„Åô„Çã
              return noticeDocRef.set({
                id: noticeDocRef.id,
                userId: userId,
                postId: postId,
                posterId: userId,
                title: title,
                body: body,
                nickname: nickname,
                emotion: emotion != null ? emotion : "",
                isRead: false,
                createdAt: serverTimestamp,
              });
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      });

export const sendPushNotificationWhenReplyToReplyIsCreated =
  functions.region("asia-northeast1")
      .firestore
      .document("users/{uId}/posts/{pId}/replies/{rId}/repliesToReply/{rtrId}")
      .onCreate(async (snapshot, context) => {
        // const authUid = context.auth?.uid;
        const userId = context.params.uId;
        const postId = context.params.pId;
        const replyId = context.params.rId;
        const replyDoc = await admin.firestore()
            .collection("users")
            .doc(userId)
            .collection("posts")
            .doc(postId)
            .collection("replies")
            .doc(replyId)
            .get();
        const repliedUserId = replyDoc.data()?.replierId;
        const replierId = snapshot.data()?.replierId;
        // replyToReply„Åó„Åü„É¶„Éº„Ç∂„ÉºÔºàauthUidÔºâ„Åå
        // reply„ÅÆuserIdÔºàreplierIdÔºâ„Å®Áï∞„Å™„Çã„Å®„Åç
        if (replierId != repliedUserId) {
          if (snapshot) {
            const userDoc = await admin.firestore()
                .collection("users")
                .doc(repliedUserId)
                .get();
            // replyToReply„ÅÆÂ†¥Âêà„Åß„ÇÇreplyToMyPost„Å®Âêå„ÅòÈÄöÁü•Ë®≠ÂÆö„Å´„Åó„Åü„ÄÇ
            // ÂÆüÈöõËøî‰ø°„ÅØËøî‰ø°„Å†„Åó„ÄÇ
            const notification = "replyToMyPost";
            const isPushNoticeAllowed =
              userDoc.data()?.pushNoticesSetting.includes(notification);
            const nickname = snapshot.data().nickname;
            // const title = "New Reply To Your Reply!";
            const title = `${nickname}„Åï„Çì„Åã„Çâ„ÅÆËøî‰ø°„Åå„ÅÇ„Çä„Åæ„Åô`;
            // const body = "„ÅÇ„Å™„Åü„ÅÆËøî‰ø°„Å´Ëøî‰ø°„Åå„ÅÇ„Çä„Åæ„Åôü§©";
            const body = snapshot.data().body;
            const postDoc = await admin.firestore()
                .collection("users")
                .doc(userId)
                .collection("posts")
                .doc(postId)
                .get();
            const emotion = postDoc.data()?.emotion;
            const serverTimestamp =
              admin.firestore.FieldValue.serverTimestamp();
            const noticeDocRef = admin.firestore()
                .collection("users")
                .doc(repliedUserId)
                .collection("notices")
                .doc();
            // „Éó„ÉÉ„Ç∑„É•ÈÄöÁü•„ÅåË®±ÂèØ„Åï„Çå„Å¶„ÅÑ„Çã„Å®„Åç
            if (isPushNoticeAllowed) {
              const tokensSnapshot = await admin.firestore()
                  .collection("users")
                  .doc(repliedUserId)
                  .collection("tokens")
                  .get();
              const tokens = tokensSnapshot.docs.map((doc) => doc.id);
              const page = "MyRepliesPage";
              // pushÈÄöÁü•„ÇíÈÄÅ„Çã
              await admin.messaging()
                  .sendAll(tokens.map((token: string) => ({
                    token: token,
                    notification: {
                      title: title,
                      body: body,
                    },
                    data: {
                      page: page,
                    },
                  })));
              // ÈÄöÁü•‰∏ÄË¶ßÔºànoticesÔºâ„Å´ËøΩÂä†„Åô„Çã
              return noticeDocRef.set({
                id: noticeDocRef.id,
                userId: repliedUserId,
                postId: postId,
                posterId: userId,
                title: title,
                body: body,
                nickname: nickname,
                emotion: emotion != null ? emotion : "",
                isRead: false,
                createdAt: serverTimestamp,
              });
            } else {
              // ÈÄöÁü•‰∏ÄË¶ßÔºànoticesÔºâ„Å´ËøΩÂä†„Åô„Çã
              return noticeDocRef.set({
                id: noticeDocRef.id,
                userId: repliedUserId,
                postId: postId,
                posterId: userId,
                title: title,
                body: body,
                nickname: nickname,
                emotion: emotion != null ? emotion : "",
                isRead: false,
                createdAt: serverTimestamp,
              });
            }
          } else {
            return null;
          }
        } else {
          return null;
        }
      });

export const sendMailWhenContactIsSubmitted = functions
    .region("asia-northeast1")
    .https.onCall(async (data, context) => {
      const {email, category, content} = data;
      if (!email) {
        throw new functions.https.HttpsError(
            "invalid-argument",
            "email is required"
        );
      }

      type FormPayload = {
        email: string;
        category: string;
        content: string;
      };

      const adminMailBody = (params: FormPayload) => {
        return `‰ª•‰∏ãÂÜÖÂÆπ„Åß„ÅäÂïè„ÅÑÂêà„Çè„Åõ„Éï„Ç©„Éº„É†„Çà„Çä„ÅäÂïè„ÅÑÂêà„Çè„Åõ„ÇíÂèó„Åë„Å§„Åë„Åæ„Åó„Åü„ÄÇ

„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ:
   ${params.email}

„ÅäÂïè„ÅÑÂêà„Çè„Åõ„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Éº:
   ${params.category}

ÂÜÖÂÆπ:
   ${params.content}
`;
      };

      const thanksMailBody = (params: FormPayload) => {
        return `„ÅäÂïè„ÅÑÂêà„Çè„Åõ„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ
‰ª•‰∏ãÂÜÖÂÆπ„Åß„ÅäÂïè„ÅÑÂêà„Çè„Åõ„ÇíÂèó„Åë‰ªò„Åë„Åæ„Åó„Åü„ÄÇ

„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ:
   ${params.email}

„ÅäÂïè„ÅÑÂêà„Çè„Åõ„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Éº:
   ${params.category}

ÂÜÖÂÆπ:
   ${params.content}

Âæå„Åª„Å©ÊãÖÂΩìËÄÖ„Çà„Çä„ÅîÈÄ£Áµ°„ÇíÂ∑Æ„Åó‰∏ä„Åí„Åæ„Åô„ÄÇ
„Çà„Çç„Åó„Åè„ÅäÈ°ò„ÅÑ„ÅÑ„Åü„Åó„Åæ„Åô„ÄÇ
`;
      };

      const adminMailData = {
        to: functions.config().mail.admin_address,
        message: {
          subject: "kakikomi-keijiban„Å∏„ÅÆ„ÅäÂïè„ÅÑÂêà„Çè„Åõ",
          text: adminMailBody({email, category, content}),
        },
        userId: context.auth?.uid,
      };

      const thanksMailData = {
        to: email,
        message: {
          subject: "kakikomi-keijiban„Å∏„ÅÆ„ÅäÂïè„ÅÑÂêà„Çè„Åõ„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô",
          text: thanksMailBody({email, category, content}),
        },
        userId: context.auth?.uid,
      };

      await admin.firestore().collection("mail").add(adminMailData);
      return admin.firestore().collection("mail").add(thanksMailData);
    });

// export const subscribeTokenToTopic =
//   async (token: string | string[], topic: string) => {
//     const ms = admin.messaging();
//     await ms.subscribeToTopic(token, topic);
//   };

// export const sendPushNotificationToTopic =
//   async (topic: string, title: string, body: string) => {
//     const ms = admin.messaging();
//     await ms.sendToTopic(topic, {
//       notification: {
//         title: title,
//         body: body,
//       },
//     });
//   };

// export const subscribeTokenToTopicWhenTokenIsCreated =
//   functions.region("asia-northeast1")
//       .firestore
//       .document("users/{userId}/confidential/{confiedntialId}")
//       .onCreate((snapshot, context) => {
//         if (snapshot) {
//           const tokens = snapshot.data().tokens;
//           const topic = "newPost";
//           return subscribeTokenToTopic(tokens, topic);
//         } else {
//           return null;
//         }
//       });

// export const sendPushNotificationToTopicWhenPostIsCreated =
//   functions.region("asia-northeast1")
//       .firestore
//       .document("users/{userId}/posts/{postId}")
//       .onCreate(async (snapshot, context) => {
//         if (snapshot) {
//           const topic = "newPost";
//           const title = "New Post";
//           const body = "Êñ∞ÁùÄ„ÅÆÊäïÁ®ø„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ";
//           return sendPushNotificationToTopic(topic, title, body);
//         } else {
//           return null;
//         }
//       });
