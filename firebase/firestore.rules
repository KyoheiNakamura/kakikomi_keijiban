rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isUserAuthenticated(userId) {
      return request.auth.uid == userId;
    }

    function existingData() {
      return resource.data;
    }

    function incomingData() {
      return request.resource.data;
    }

    function isValidUser(user) {
      return user.size() == 11
        && 'userId' in user && user.userId is string
        && 'nickname' in user && user.nickname is string
        && 'position' in user && user.position is string
        && 'gender' in user && user.gender is string
        && 'age' in user && user.age is string
        && 'area' in user && user.area is string
        && 'postCount' in user && user.postCount is int
        && 'topics' in user && user.topics is list
        && 'notifications' in user && user.notifications is list
        && 'createdAt' in user && user.createdAt is timestamp
        && 'updatedAt' in user && user.updatedAt is timestamp
      ;
    }

    function isValidPost(post) {
      return post.size() == 16
        && 'userId' in post && post.userId is string
        && 'id' in post && post.id is string
        && 'nickname' in post && post.nickname is string
        && 'position' in post && post.position is string
        && 'gender' in post && post.gender is string
        && 'age' in post && post.age is string
        && 'area' in post && post.area is string
        && 'title' in post && post.title is string
        && 'body' in post && post.body is string
        && 'emotion' in post && post.emotion is string
        && 'categories' in post && post.categories is list
        && 'replyCount' in post && post.replyCount is int
        && 'empathyCount' in post && post.empathyCount is int
        && 'isReplyExisting' in post && post.isReplyExisting is bool
        && 'createdAt' in post && post.createdAt is timestamp
        && 'updatedAt' in post && post.updatedAt is timestamp
      ;
    }

    function isValidReply(reply) {
      return reply.size() == 12
        && 'userId' in reply && reply.userId is string
        && 'postId' in reply && reply.postId is string
        && 'id' in reply && reply.id is string
        && 'replierId' in reply && reply.replierId is string
        && 'body' in reply && reply.body is string
        && 'nickname' in reply && reply.nickname is string
        && 'position' in reply && reply.position is string
        && 'gender' in reply && reply.gender is string
        && 'age' in reply && reply.age is string
        && 'area' in reply && reply.area is string
        && 'createdAt' in reply && reply.createdAt is timestamp
        && 'updatedAt' in reply && reply.updatedAt is timestamp
      ;
    }

    function isValidReplyToReply(reply) {
      return reply.size() == 13
        && 'userId' in reply && reply.userId is string
        && 'replyId' in reply && reply.replyId is string
        && 'postId' in reply && reply.postId is string
        && 'id' in reply && reply.id is string
        && 'replierId' in reply && reply.replierId is string
        && 'body' in reply && reply.body is string
        && 'nickname' in reply && reply.nickname is string
        && 'position' in reply && reply.position is string
        && 'gender' in reply && reply.gender is string
        && 'age' in reply && reply.age is string
        && 'area' in reply && reply.area is string
        && 'createdAt' in reply && reply.createdAt is timestamp
        && 'updatedAt' in reply && reply.updatedAt is timestamp
      ;
    }

    function isValidBookmarkedPost(bookmarkedPost) {
      return bookmarkedPost.size() == 3
        && 'id' in bookmarkedPost && bookmarkedPost.id is string
        && 'userId' in bookmarkedPost && bookmarkedPost.userId is string
        && 'createdAt' in bookmarkedPost && bookmarkedPost.createdAt is timestamp
    }

    function isValidEmpathizedPost(empathizedPost) {
      return empathizedPost.size() == 4
        && 'id' in empathizedPost && empathizedPost.id is string
        && 'userId' in empathizedPost && empathizedPost.userId is string
        && 'myEmpathyCount' in empathizedPost && empathizedPost.myEmpathyCount is int
        && 'createdAt' in empathizedPost && empathizedPost.createdAt is timestamp
    }

    function isValidContact(contact) {
      return contact.size() == 6
        && 'id' in contact && contact.id is string
        && 'userId' in contact && contact.userId is string
        && 'email' in contact && contact.email is string
        && 'category' in contact && contact.category is string
        && 'content' in contact && contact.content is string
        && 'createdAt' in contact && contact.createdAt is timestamp
    }

    // Authenticated users can query the posts collection group
    // Applies to collection queries, collection group queries, and
    // single document retrievals
    match /{path=**}/posts/{post} {
      allow read: if isAuthenticated();
    }

    match /users/{userId} {
      allow read: if Authenticated();
      allow create: if isUserAuthenticated(userId)
      // スキーマ検証
        && isValidUser(incomingData())
      // バリデーション
        && incomingData().userId == userId
        && incomingData().nickname.size() <= 10
        && incomingData().position.size() <= 10
        && incomingData().gender.size() <= 10
        && incomingData().age.size() <= 10
        && incomingData().area.size() <= 10
        && incomingData().postCount >= 0
        && incomingData().postCount < 10000
        && incomingData().topics.size() == 0
        && incomingData().notifications.size() >= 0
        && incomingData().createdAt == request.time
        && incomingData().updatedAt == request.time
      ;
      allow update: if isUserAuthenticated(userId)
      // スキーマ検証
        && isValidUser(incomingData())
      // バリデーション
        && incomingData().userId == userId
        && incomingData().nickname.size() <= 10
        && incomingData().position.size() <= 10
        && incomingData().gender.size() <= 10
        && incomingData().age.size() <= 10
        && incomingData().area.size() <= 10
        && incomingData().postCount >= 0
      //   && (incomingData().postCount == existingData().postCount
      //   ||  incomingData().postCount == existingData().postCount + 1
      //   ||  incomingData().postCount == existingData().postCount - 1
      // )
        && incomingData().topics.size() >= 0
        && incomingData().notifications.size() >= 0
        && incomingData().createdAt == existingData().createdAt
        && incomingData().updatedAt == request.time
      ;

      // /users/{userId}/posts
      match /posts/{postId} {
        // draftの時は isUserAuthenticated(userId) にする
        allow read: if isAuthenticated(); 
        allow create: if isUserAuthenticated(userId)
        // スキーマ検証
          && isValidPost(incomingData())
        // バリデーション
          && incomingData().userId == userId
          && incomingData().id == postId
        // draftの時は >= 0 にする
          && incomingData().nickname.size() > 0
          && incomingData().nickname.size() <= 10
          && incomingData().position.size() <= 10
          && incomingData().gender.size() <= 10
          && incomingData().age.size() <= 10
          && incomingData().area.size() <= 10
        // draftの時は >= 0 にする
          && incomingData().emotion.size() > 0
          && incomingData().emotion.size() <= 10
        // draftの時は >= 0 にする
          && incomingData().title.size() > 0
          && incomingData().title.size() <= 50
        // draftの時は >= 0 にする
          && incomingData().body.size() > 0
          && incomingData().body.size() <= 1500
        // draftの時は >= 0 にする
          && incomingData().categories.size() >= 1
          && incomingData().categories.size() <= 5
          && incomingData().replyCount == 0
          && incomingData().empathyCount == 0
          && incomingData().isReplyExisting == false
          && incomingData().createdAt == request.time
          && incomingData().updatedAt == request.time
        ;
        allow update: if isUserAuthenticated(userId)
        // スキーマ検証
          && isValidPost(incomingData())
        // バリデーション
          && incomingData().userId == existingData().userId
          && incomingData().id == existingData().id
        // draftの時は >= 0 にする
          && incomingData().nickname.size() > 0
          && incomingData().nickname.size() <= 10
          && incomingData().position.size() <= 10
          && incomingData().gender.size() <= 10
          && incomingData().age.size() <= 10
          && incomingData().area.size() <= 10
        // draftの時は >= 0 にする
          && incomingData().emotion.size() > 0
          && incomingData().emotion.size() <= 10
        // draftの時は >= 0 にする
          && incomingData().title.size() > 0
          && incomingData().title.size() <= 50
        // draftの時は >= 0 にする
          && incomingData().body.size() > 0
          && incomingData().body.size() <= 1500
        // draftの時は >= 0 にする
          && incomingData().categories.size() >= 1
          && incomingData().categories.size() <= 5
          && incomingData().replyCount.size() >= 0
          && incomingData().empathyCount.size() >= 0
        //   && (incomingData().replyCount == existingData().replyCount
        //   ||  incomingData().replyCount == existingData().replyCount + 1
        //   ||  incomingData().replyCount == existingData().replyCount - 1
        // )
          && incomingData().createdAt == existingData().createdAt
          && incomingData().updatedAt == request.time
        ;
        allow delete: if isUserAuthenticated(userId);

        // /users/{userId}/posts/{postId}/replies
        match /replies/{replyId} {
          allow read: if isAuthenticated(); 
          allow create: if isAuthenticated()
          // スキーマ検証
            && isValidReply(incomingData())
          // バリデーション
            && incomingData().userId == userId
            && incomingData().postId == postId
            && incomingData().id == replyId
          // Todo replierId文字制限かける？autoGenerateIdの文字数いくらよ？？とりあえず50にしとく
            && incomingData().replierId.size() <= 50
          // draftの時は >= 0 にする
            && incomingData().nickname.size() > 0
            && incomingData().nickname.size() <= 10
            && incomingData().position.size() <= 10
            && incomingData().gender.size() <= 10
            && incomingData().age.size() <= 10
            && incomingData().area.size() <= 10
          // draftの時は >= 0 にする
            && incomingData().body.size() > 0
            && incomingData().body.size() <= 1500
            && incomingData().createdAt == request.time
            && incomingData().updatedAt == request.time
          ;
          allow update: if isUserAuthenticated(existingData().replierId)
          // スキーマ検証
            && isValidReply(incomingData().replierId)
          // バリデーション
            && incomingData().userId == existingData().userId
            && incomingData().postId == existingData().postId
            && incomingData().id == existingData().id
          // Todo replierId文字制限かける？autoGenerateIdの文字数いくらよ？？とりあえず50にしとく
            && incomingData().replierId == existingData().replierId
          // draftの時は >= 0 にする
            && incomingData().nickname.size() > 0
            && incomingData().nickname.size() <= 10
            && incomingData().position.size() <= 10
            && incomingData().gender.size() <= 10
            && incomingData().age.size() <= 10
            && incomingData().area.size() <= 10
          // draftの時は >= 0 にする
            && incomingData().body.size() > 0
            && incomingData().body.size() <= 1500
            && incomingData().createdAt == existingData().createdAt
            && incomingData().updatedAt == request.time
          ;
          allow delete: if isUserAuthenticated(existingData().replierId);

          // /users/{userId}/posts/{postId}/replies/{replyId}/repliesToReply
          match /repliesToReply/{replyToReplyId} {
            allow read: if isAuthenticated(); 
            allow create: if isAuthenticated()
            // スキーマ検証
              && isValidReplyToReply(incomingData())
            // バリデーション
              && incomingData().userId == userId
              && incomingData().postId == postId
              && incomingData().replyId == replyId
              && incomingData().id == replyToReplyId
            // Todo autoGenerateIdの文字数いくらよ？？とりあえず50にしとく。
              && incomingData().replierId.size() <= 50

              && incomingData().nickname.size() > 0
              && incomingData().nickname.size() <= 10
              && incomingData().position.size() <= 10
              && incomingData().gender.size() <= 10
              && incomingData().age.size() <= 10
              && incomingData().area.size() <= 10
              && incomingData().body.size() > 0
              && incomingData().body.size() <= 1500
              && incomingData().createdAt == request.time
              && incomingData().updatedAt == request.time
            ;
            allow update: if isUserAuthenticated(existingData().replierId)
            // スキーマ検証
              && isValidReply(incomingData().replierId)
            // バリデーション
              && incomingData().userId == existingData().userId
              && incomingData().postId == existingData().postId
              && incomingData().replyId == existingData().replyId
              && incomingData().id == existingData().id
              && incomingData().replierId == existingData().replierId
              && incomingData().nickname.size() > 0
              && incomingData().nickname.size() <= 10
              && incomingData().position.size() <= 10
              && incomingData().gender.size() <= 10
              && incomingData().age.size() <= 10
              && incomingData().area.size() <= 10
              && incomingData().body.size() > 0
              && incomingData().body.size() <= 1500
              && incomingData().createdAt == existingData().createdAt
              && incomingData().updatedAt == request.time
            ;
            allow delete: if isUserAuthenticated(existingData().replierId);
          }
        }
      }

      match /{path=**}/bookmarkedPosts/{bookmarkedPostId} {
        allow read: if isAuthenticated();
      }

      // /users/{userId}/bookmarkedPosts
      match /bookmarkedPosts/{bookmarkedPostId} {
        allow read: if isUserAuthenticated(userId); 
        allow create: if isUserAuthenticated(userId)
        // スキーマ検証
          && isValidBookmarkedPost(incomingData())
        // バリデーション
          && incomingData().userId == userId
          && incomingData().id == bookmarkedPostId
          && incomingData().createdAt == request.time
        ;
        allow delete: if isUserAuthenticated(userId);
      }

      match /{path=**}/empathizedPosts/{empathizedPostId} {
        allow read: if isAuthenticated();
      }
      
      // /users/{userId}/empathizedPosts
      match /empathizedPosts/{empathizedPostId} {
        allow read: if isUserAuthenticated(userId); 
        allow create: if isUserAuthenticated(userId)
        // スキーマ検証
          && isValidEmpathizedPost(incomingData())
        // バリデーション
          && incomingData().userId == userId
          && incomingData().id == empathizedPostId
          && incomingData().myEmpathyCount == 0
          && incomingData().createdAt == request.time
        ;
        allow update: if isUserAuthenticated(userId)
        // スキーマ検証
          && isValidEmpathizedPost(incomingData())
        // バリデーション
          && incomingData().userId == existingData().userId
          && incomingData().id == existingData().id
          && incomingData().myEmpathyCount == existingData().myEmpathyCount + 1
          && existingData().myEmpathyCount < 10
          && incomingData().createdAt == existingData().createdAt
        ;
        allow delete: if isUserAuthenticated(userId);
      }

      // /users/{userId}/draftedPosts
      match /draftedPosts/{draftedPostId} {
        allow read: if isUserAuthenticated(userId); 
        allow create: if isUserAuthenticated(userId)
        // スキーマ検証
          && isValidPost(incomingData())
        // バリデーション
          && incomingData().userId == userId
          && incomingData().id == draftedPostId
          && incomingData().nickname.size() >= 0
          && incomingData().nickname.size() <= 10
          && incomingData().position.size() <= 10
          && incomingData().gender.size() <= 10
          && incomingData().age.size() <= 10
          && incomingData().area.size() <= 10
          && incomingData().emotion.size() >= 0
          && incomingData().emotion.size() <= 10
          && incomingData().title.size() >= 0
          && incomingData().title.size() <= 50
          && incomingData().body.size() >= 0
          && incomingData().body.size() <= 1500
          && incomingData().categories.size() >= 0
          && incomingData().categories.size() <= 5
          && incomingData().replyCount == 0
          && incomingData().empathyCount == 0
          && incomingData().createdAt == request.time
          && incomingData().updatedAt == request.time
        ;
        allow update: if isUserAuthenticated(userId)
        // スキーマ検証
          && isValidPost(incomingData())
        // バリデーション
          && incomingData().userId == existingData().userId
          && incomingData().id == existingData().id
          && incomingData().nickname.size() >= 0
          && incomingData().nickname.size() <= 10
          && incomingData().position.size() <= 10
          && incomingData().gender.size() <= 10
          && incomingData().age.size() <= 10
          && incomingData().area.size() <= 10
          && incomingData().emotion.size() >= 0
          && incomingData().emotion.size() <= 10
          && incomingData().title.size() >= 0
          && incomingData().title.size() <= 50
          && incomingData().body.size() >= 0
          && incomingData().body.size() <= 1500
          && incomingData().categories.size() >= 0
          && incomingData().categories.size() <= 5
          && incomingData().replyCount == 0
          && incomingData().empathyCount == 0
        //   && (incomingData().replyCount == existingData().replyCount
        //   ||  incomingData().replyCount == existingData().replyCount + 1
        //   ||  incomingData().replyCount == existingData().replyCount - 1
        // )
          && incomingData().createdAt == existingData().createdAt
          && incomingData().updatedAt == request.time
        ;
        allow delete: if isUserAuthenticated(userId);
      }

      // /users/{userId}/draftedReplies
      match /draftedReplies/{draftedReplyId} {
        allow read: if isUserAuthenticated(userId);
        allow create: if isUserAuthenticated(userId)
        // スキーマ検証
          && isValidReply(incomingData())
        // バリデーション
          && incomingData().userId == userId
          && incomingData().postId == postId
          && incomingData().id == draftedReplyId
        // Todo replierId文字制限かける？autoGenerateIdの文字数いくらよ？？とりあえず50にしとく
          && incomingData().replierId.size() <= 50
          && incomingData().nickname.size() >= 0
          && incomingData().nickname.size() <= 10
          && incomingData().position.size() <= 10
          && incomingData().gender.size() <= 10
          && incomingData().age.size() <= 10
          && incomingData().area.size() <= 10
          && incomingData().body.size() >= 0
          && incomingData().body.size() <= 1500
          && incomingData().createdAt == request.time
          && incomingData().updatedAt == request.time
        ;
        allow update: if isUserAuthenticated(userId)
        // スキーマ検証
          && isValidReply(incomingData().replierId)
        // バリデーション
          && incomingData().userId == existingData().userId
          && incomingData().postId == existingData().postId
          && incomingData().id == existingData().id
          && incomingData().replierId == existingData().replierId
          && incomingData().nickname.size() >= 0
          && incomingData().nickname.size() <= 10
          && incomingData().position.size() <= 10
          && incomingData().gender.size() <= 10
          && incomingData().age.size() <= 10
          && incomingData().area.size() <= 10
          && incomingData().body.size() >= 0
          && incomingData().body.size() <= 1500
          && incomingData().createdAt == existingData().createdAt
          && incomingData().updatedAt == request.time
        ;
        allow delete: if isUserAuthenticated(userId);
      }

      // /users/{userId}/draftedRepliesToReply
      match /draftedRepliesToReply/{draftedReplyToReplyId} {
        allow read: if isUserAuthenticated(userId);
        allow create: if isUserAuthenticated(userId)
        // スキーマ検証
          && isValidReplyToReply(incomingData())
        // バリデーション
          && incomingData().userId == userId
          && incomingData().postId == postId
          && incomingData().replyId == replyId
          && incomingData().id == draftedReplyToReplyId
        // Todo autoGenerateIdの文字数いくらよ？？とりあえず50にしとく。
          && incomingData().replierId.size() <= 50
          && incomingData().nickname.size() > 0
          && incomingData().nickname.size() <= 10
          && incomingData().position.size() <= 10
          && incomingData().gender.size() <= 10
          && incomingData().age.size() <= 10
          && incomingData().area.size() <= 10
          && incomingData().body.size() > 0
          && incomingData().body.size() <= 1500
          && incomingData().createdAt == request.time
          && incomingData().updatedAt == request.time
        ;
        allow update: if isUserAuthenticated(userId)
        // スキーマ検証
          && isValidReply(incomingData().replierId)
        // バリデーション
          && incomingData().userId == existingData().userId
          && incomingData().postId == existingData().postId
          && incomingData().replyId == existingData().replyId
          && incomingData().id == existingData().id
          && incomingData().replierId == existingData().replierId
          && incomingData().nickname.size() > 0
          && incomingData().nickname.size() <= 10
          && incomingData().position.size() <= 10
          && incomingData().gender.size() <= 10
          && incomingData().age.size() <= 10
          && incomingData().area.size() <= 10
          && incomingData().body.size() > 0
          && incomingData().body.size() <= 1500
          && incomingData().createdAt == existingData().createdAt
          && incomingData().updatedAt == request.time
        ;
        allow delete: if isUserAuthenticated(userId);
      }

      // /users/{userId}/tokens
      match /tokens/{tokenId} {
        allow read: if isAuthenticated();
        allow create: if isUserAuthenticated(userId);
      }
    }

    // /mail/{mailId}/
    match /mail/{mailId} {
      allow create: if isAuthenticated();
    }

    // /contacts/{contactId}/
    match /contacts/{contactId} {
      allow create: if isAuthenticated()
      // スキーマ検証
        && isValidContact(incomingData())
      // バリデーション
        && incomingData().id == contactId
        && incomingData().category.size() <= 20
        && incomingData().content.size() > 0
        && incomingData().content.size() <= 500
        && incomingData().createdAt == request.time
      ;
    }
  }
}

// request はルールの記述のどこからでもアクセスできる（グローバルに定義されている）値です。
// request.auth：ユーザーの認証情報に関する値が参照できる
// request.resource.data：来るやつ・クライアントから送られてくるフィールドとその値が参照できる
// resource.data：居るやつ・ドキュメントに格納されているフィールドとその値が参照できる

// if request.time < timestamp.date(2021, 4, 21);